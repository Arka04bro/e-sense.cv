import cv2
from deepface import DeepFace
import telebot
import threading
import json
import os
def setup():
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫—É Emotion Detection Bot!")
    token = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather): ").strip()
    chat_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à chat_id (—É–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —É @userinfobot –≤ Telegram): ").strip()
    config = {
        "TOKEN": token,
        "CHAT_ID": chat_id
    }
    with open('config.json', 'w') as f:
        json.dump(config, f)
    
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
def load_config():
    if not os.path.exists('config.json'):
        setup()
    
    with open('config.json', 'r') as f:
        return json.load(f)
config = load_config()
TOKEN = config['TOKEN']
CHAT_ID = config['CHAT_ID']

bot = telebot.TeleBot(TOKEN)
detection_active = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
def detect_emotions():
    global detection_active
    detection_active = True
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ")
        bot.send_message(CHAT_ID, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ")
        detection_active = False
        return
    
    prev_emotion = None
    while detection_active:
        ret, frame = cap.read()
        if not ret:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞")
            bot.send_message(CHAT_ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞")
            break
        
        try:
            analysis = DeepFace.analyze(frame, actions=['emotion'], enforce_detection=False)
            emotion = analysis[0]['dominant_emotion'] if isinstance(analysis, list) else analysis['dominant_emotion']
            
            if emotion != prev_emotion:
                print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —ç–º–æ—Ü–∏—è: {emotion}")
                bot.send_message(CHAT_ID, f"üë§ –≠–º–æ—Ü–∏—è: {emotion}")
                prev_emotion = emotion
                
            cv2.imshow('Emotion Detection', frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                detection_active = False
                break
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            bot.send_message(CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    cap.release()
    cv2.destroyAllWindows()
    detection_active = False
    print("–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω.")
@bot.message_handler(commands=['start'])
def start(message):
    global detection_active
    if not detection_active:
        print("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π...")
        threading.Thread(target=detect_emotions).start()
        bot.reply_to(message, "üîç –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –∑–∞–ø—É—â–µ–Ω!")
    else:
        bot.reply_to(message, "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
@bot.message_handler(commands=['stop'])
def stop(message):
    global detection_active
    detection_active = False
    bot.reply_to(message, "‚èπ –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏ /stop –≤ Telegram.")
    bot.polling(none_stop=True)
